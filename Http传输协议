package com.ftvalue.walletCore.service.impl;

import com.ftvalue.walletCore.service.HttpService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.net.URI;
import java.util.Map;

/**
 * Created by admin on 2017/6/6.
 */
@Slf4j
@Service
public class HttpServiceImpl implements HttpService {
    @Autowired
    private RestTemplate restTemplate;

    @Override
    public String doRequest(String url, Map<String, String> map,HttpMethod httpMethod) {
        RequestEntity<String> requestEntity = enrichRequestEntity(url,map,httpMethod);
        ResponseEntity<String> responseEntity = doRequest(requestEntity);
        return responseEntity.getBody();
    }
    @Override
    public String doRequest(String url, String json,HttpMethod httpMethod) throws Exception {
        RequestEntity<String> requestEntity = enrichRequestEntity(url,json,httpMethod);
        ResponseEntity<String> responseEntity = doRequest(requestEntity);
        return responseEntity.getBody();
    }

    @Override
    public String postFormRequest(String url, Map<String, String> map) {
        MultiValueMap headers = new LinkedMultiValueMap();
        headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED_VALUE.toString());
        HttpEntity requestEntity = new HttpEntity(toMultiValueMap(map), headers);
        ResponseEntity<String> responseEntity = restTemplate.postForEntity(url,requestEntity,String.class);
        String responseBody = responseEntity.getBody();
        return responseBody;
    }

    public ResponseEntity<String> doRequest(RequestEntity<String> requestEntity) {
//        log.info("do request:{}", requestEntity);
        ResponseEntity<String> responseEntity = restTemplate.exchange(requestEntity, String.class);
        log.info("response body:" + responseEntity.getBody());
        return responseEntity;
    }

    public RequestEntity enrichRequestEntity(String url, Map<String, String> map, HttpMethod httpMethod) {
        StringBuffer sb = new StringBuffer("");
        for (String key:map.keySet()) {
            sb.append(key).append("=").append(map.get(key)).append("&");
        }
        String query = sb.substring(0,sb.length()-1);
        URI uri = UriComponentsBuilder.fromHttpUrl(url).query(query).build().encode().toUri();

        return new RequestEntity(httpMethod,uri);

    }
    public RequestEntity enrichRequestEntity(String url, String json, HttpMethod httpMethod) {
        URI uri = UriComponentsBuilder.fromHttpUrl(url).build().encode().toUri();
        MultiValueMap headers = new LinkedMultiValueMap();
        headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON.toString());
        return new RequestEntity<String>(json,headers,httpMethod,uri);

    }

    private MultiValueMap toMultiValueMap(Map<String, String> map) {
        MultiValueMap multiValueMap = new LinkedMultiValueMap();
        for (String key : map.keySet()) {
            multiValueMap.add(key, map.get(key));
        }
        return multiValueMap;
    }

}


//RestTemplateConfig

package com.ftvalue.walletCore.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.core.env.Environment;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.nio.charset.StandardCharsets;

/**
 * Created by acer on 2017/6/22.
 */
@Service
public class RestTemplateConfig {

    @Autowired
    private Environment env;

    @Bean
    public HttpComponentsClientHttpRequestFactory customHttpRequestFactory() {
        HttpComponentsClientHttpRequestFactory httpRequestFactory = new HttpComponentsClientHttpRequestFactory();
        int connectRequestTiemout = Integer.valueOf(env.getProperty("rest.connection.connection-request-timeout"));
        httpRequestFactory.setConnectionRequestTimeout(connectRequestTiemout);
        int connectTiemout = Integer.valueOf(env.getProperty("rest.connection.connect-timeout"));
        httpRequestFactory.setConnectTimeout(connectTiemout);
        int readTimeout = Integer.valueOf(env.getProperty("rest.connection.read-timeout"));
        httpRequestFactory.setReadTimeout(readTimeout);
        return httpRequestFactory;
    }


    @Bean
    public RestTemplate restTemplate() {
        RestTemplate restTemplate = new RestTemplate(customHttpRequestFactory());
        StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter(StandardCharsets.UTF_8);
        stringHttpMessageConverter.setWriteAcceptCharset(false);
        for (int i = 0; i < restTemplate.getMessageConverters().size(); i++) {
            if (restTemplate.getMessageConverters().get(i) instanceof StringHttpMessageConverter) {
                restTemplate.getMessageConverters().remove(i);
                restTemplate.getMessageConverters().add(i, stringHttpMessageConverter);
                break;
            }
        }
        return restTemplate;
    }
}
